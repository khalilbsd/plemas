#!/bin/bash

# Check if a directory name is provided as an argument
if [ $# -eq 0 ]; then
    echo "Usage: $0 <project_name>"
    exit 1
fi

Create a directory with the project name
 if [ -d "ms_$1" ]; then
        echo "Directory 'Ms_$1' already exists. Aborting."
        exit 1
    fi
mkdir "ms_$1"
cd "ms_$1"


declare -a arr=("controllers"
"services"
"models"
"routes"
"constants"
"db"
"errors"
"i18n"
"mails"
"middleware"
"uploads"
"utils"
"log"
)

# creating dummy files

# Create directories for each microservice
for i in "${arr[@]}"
do

   mkdir "$i"
done
touch routes/example.route.js
touch routes/testExample.route.js

cp ../server/Dockerfile
# Copy basic files

cp ../server/errors/*  ./errors
cp ../server/middleware/*  ./middleware
cp ../server/Utils/*  ./utils
cp ../server/log/*  ./log
cp ../server/environment.config.js ./
cp ../server/environment.config.js ./
cp ../server/.env ./
cp ../server/.env.dev ./

echo "structure created succussfully"

echo "copying database and index files"
cp ../templates/db/*  ./db
cp ../templates/index.js ./index.js

echo "copying other files from templates"
cp ../templates/constants/* ./constants
# Create a basic package.json file in each microservice directory
    cat <<EOF > "./package.json"
{
  "name": "ms_$1 server",
  "version": "1.0.0",
  "type": "module",
  "description": "ms_$1 folder",
  "main": "index.js",
  "scripts": {
    "start": "node index.js --prod",
    "start:dev": "nodemon --config nodemon.json index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/khalilbsd/plemas.git.git"
  },
  "author": "IT Solution",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/khalilbsd/plemas.git/issues"
  },
  "homepage": "https://github.com/khalilbsd/plemas.git#readme",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "jsonwebtoken": "^9.0.2",
    "moment": "^2.29.4",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "nodemailer": "^6.9.5",
    "path": "^0.12.7",
    "url": "^0.11.2",
    "winston": "^3.10.0"
  },
  "devDependencies": {
    "eslint": "^8.57.0",
    "eslint-config-google": "^0.14.0",
    "nodemon": "^3.0.1",
    "eslint-plugin-security": "^2.1.1"

  }
}
EOF


# Create a basic index.js file in each microservice directory

echo "created default files for the service $1"

# pwd
echo "installing the default package for the service: $1"

npm i

echo "Node.js microservices template created successfully in directory $1"

# Prompt the user to enter the name of the new microservice
read -p "Enter the name of the new microservice: " new_service_name

# Replace the placeholder 'ms_authn' in the docker-compose.dev.yml file with the user-provided microservice name
sed -i "s/ms_authn/$new_service_name/g" ../docker-compose.dev.yml

# Replace the placeholder 'PORT' in the docker-compose.dev.yml file with the user-provided port number
read -p "Enter the port number for the new microservice: " new_port_number
sed -i "s/PORT/$new_port_number/g" ../docker-compose.dev.yml

echo "New microservice '$new_service_name' added to docker-compose.dev.yml with port $new_port_number"